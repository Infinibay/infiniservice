[package]
name = "infiniservice"
version = "0.1.0"
edition = "2021"
authors = ["Infinibay Team"]
description = "Multiplatform background service for VM data collection and communication via virtio-serial"
license = "MIT"

[dependencies]
# Async runtime
tokio = { version = "1.0", features = ["full"] }

# Logging
log = "0.4"
env_logger = "0.11"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Date/time handling
chrono = { version = "0.4", features = ["serde"] }

# Error handling
anyhow = "1.0"
thiserror = "1.0"

# Cross-platform utilities
dirs = "5.0"
uuid = { version = "1.0", features = ["v4"] }

# Async trait support
async-trait = "0.1"

# Configuration
config = "0.14"

# System monitoring and information
sysinfo = "0.36"

# Network monitoring and connections
netstat2 = "0.11"

# File system monitoring and notifications
notify = "8.0"

# File timestamp operations
filetime = "0.2"

# Image processing (for icon extraction)
image = "0.25"

# Hostname detection
hostname = "0.3"

# Command execution
subprocess = "0.2"

# HTTP client for update checking
reqwest = { version = "0.11", features = ["json"] }

# Regular expressions for version parsing
regex = "1.0"

[target.'cfg(windows)'.dependencies]
# Windows API bindings for icon extraction and system operations
winapi = { version = "0.3", features = [
    "winuser", "shellapi", "commdlg", "processthreadsapi",
    "psapi", "winnt", "handleapi", "fileapi", "errhandlingapi",
    "setupapi", "devguid", "winreg", "winbase", "commapi", 
    "ioapiset", "synchapi", "minwinbase", "winerror"
] }

# Windows service management
windows-service = "0.8"

# Windows performance counters
wmi = "0.13"

# Windows system APIs
windows = { version = "0.58", features = [
    "Win32_System_Services",
    "Win32_System_ProcessStatus",
    "Win32_Foundation",
    "Win32_System_Threading",
    "Win32_System_SystemInformation",
    "Win32_System_LibraryLoader",
    "Win32_System_Registry",
    "Win32_System_Com",
    "Win32_System_Ole",
    "Win32_System_UpdateAgent",
    "Win32_System_Variant"
] }

# Serial port communication for Windows VirtIO
serialport = "4.2"

[target.'cfg(target_os = "linux")'.dependencies]
# Process and system metrics for Linux
procfs = "0.17"

# Unix process and signal handling
nix = { version = "0.29", features = ["signal", "process"] }

# APT package management for Debian/Ubuntu
apt-pkg-native = { version = "0.3", optional = true }

# RPM package management for Red Hat/Fedora/CentOS
rpm = { version = "0.13", optional = true }

# Optional features for package management
[features]
default = []
apt-support = ["apt-pkg-native"]
rpm-support = ["rpm"]
full-linux-support = ["apt-support", "rpm-support"]

# Release profile optimizations to reduce false positives
[profile.release]
opt-level = 3           # Maximum optimization
lto = true             # Enable Link Time Optimization
codegen-units = 1      # Single codegen unit for better optimization
strip = true           # Strip debug symbols to reduce detection
panic = "abort"        # Smaller binary size

# Windows-specific release profile
[profile.release-windows]
inherits = "release"
opt-level = "z"        # Optimize for size which can help with AV detection
